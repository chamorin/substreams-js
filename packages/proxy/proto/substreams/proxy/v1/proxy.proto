syntax = "proto3";

package substreams.proxy.v1;

import "sf/substreams/rpc/v2/service.proto";
import "sf/substreams/v1/modules.proto";
import "sf/substreams/v1/package.proto";

message ProxyRequest {
  int64 start_block_num = 1;
  string start_cursor = 2;
  uint64 stop_block_num = 3;

  // With final_block_only, you only receive blocks that are irreversible:
  // 'final_block_height' will be equal to current block and no 'undo_signal' will ever be sent
  bool final_blocks_only = 4;

  // Substreams has two mode when executing your module(s) either development mode or production
  // mode. Development and production modes impact the execution of Substreams, important aspects
  // of execution include:
  // * The time required to reach the first byte.
  // * The speed that large ranges get executed.
  // * The module logs and outputs sent back to the client.
  //
  // By default, the engine runs in developer mode, with richer and deeper output. Differences
  // between production and development modes include:
  // * Forward parallel execution is enabled in production mode and disabled in development mode
  // * The time required to reach the first byte in development mode is faster than in production mode.
  //
  // Specific attributes of development mode include:
  // * The client will receive all of the executed module's logs.
  // * It's possible to request specific store snapshots in the execution tree (via `debug_initial_store_snapshot_for_modules`).
  // * Multiple module's output is possible.
  //
  // With production mode`, however, you trade off functionality for high speed enabling forward
  // parallel execution of module ahead of time.
  bool production_mode = 5;

  string output_module = 6;

  sf.substreams.v1.Modules modules = 7;

  // Available only in developer mode
  repeated string debug_initial_store_snapshot_for_modules = 10;

  // The full substream package. This will not be sent to the upstream service and is only used by
  // the proxy internally to support json serde.
  sf.substreams.v1.Package package = 1337;
}

service ProxyService {
  rpc Proxy(ProxyRequest) returns (stream sf.substreams.rpc.v2.Response);
}
