// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file substreams/proxy/v1/proxy.proto (package substreams.proxy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Modules } from "@substreams/core/proto/sf/substreams/v1/modules_pb.js";
import { Package } from "@substreams/core/proto/sf/substreams/v1/package_pb.js";

/**
 * @generated from message substreams.proxy.v1.ProxyRequest
 */
export class ProxyRequest extends Message<ProxyRequest> {
  /**
   * @generated from field: int64 start_block_num = 1;
   */
  startBlockNum = protoInt64.zero;

  /**
   * @generated from field: string start_cursor = 2;
   */
  startCursor = "";

  /**
   * @generated from field: uint64 stop_block_num = 3;
   */
  stopBlockNum = protoInt64.zero;

  /**
   * With final_block_only, you only receive blocks that are irreversible:
   * 'final_block_height' will be equal to current block and no 'undo_signal' will ever be sent
   *
   * @generated from field: bool final_blocks_only = 4;
   */
  finalBlocksOnly = false;

  /**
   * Substreams has two mode when executing your module(s) either development mode or production
   * mode. Development and production modes impact the execution of Substreams, important aspects
   * of execution include:
   * * The time required to reach the first byte.
   * * The speed that large ranges get executed.
   * * The module logs and outputs sent back to the client.
   *
   * By default, the engine runs in developer mode, with richer and deeper output. Differences
   * between production and development modes include:
   * * Forward parallel execution is enabled in production mode and disabled in development mode
   * * The time required to reach the first byte in development mode is faster than in production mode.
   *
   * Specific attributes of development mode include:
   * * The client will receive all of the executed module's logs.
   * * It's possible to request specific store snapshots in the execution tree (via `debug_initial_store_snapshot_for_modules`).
   * * Multiple module's output is possible.
   *
   * With production mode`, however, you trade off functionality for high speed enabling forward
   * parallel execution of module ahead of time.
   *
   * @generated from field: bool production_mode = 5;
   */
  productionMode = false;

  /**
   * @generated from field: string output_module = 6;
   */
  outputModule = "";

  /**
   * @generated from field: sf.substreams.v1.Modules modules = 7;
   */
  modules?: Modules;

  /**
   * Available only in developer mode
   *
   * @generated from field: repeated string debug_initial_store_snapshot_for_modules = 10;
   */
  debugInitialStoreSnapshotForModules: string[] = [];

  /**
   * The full substream package. This will not be sent to the upstream service and is only used by
   * the proxy internally to support json serde.
   *
   * @generated from field: sf.substreams.v1.Package package = 1337;
   */
  package?: Package;

  constructor(data?: PartialMessage<ProxyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "substreams.proxy.v1.ProxyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_block_num", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "start_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stop_block_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "final_blocks_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "production_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "output_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "modules", kind: "message", T: Modules },
    { no: 10, name: "debug_initial_store_snapshot_for_modules", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 1337, name: "package", kind: "message", T: Package },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProxyRequest {
    return new ProxyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProxyRequest {
    return new ProxyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProxyRequest {
    return new ProxyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProxyRequest | PlainMessage<ProxyRequest> | undefined, b: ProxyRequest | PlainMessage<ProxyRequest> | undefined): boolean {
    return proto3.util.equals(ProxyRequest, a, b);
  }
}

