import { createBinaryHash } from "./createModuleHash.js";
import { expect, test } from "vitest";

test.each([
  // substreams info https://github.com/pinax-network/subtivity-substreams/releases/download/v0.2.1/subtivity-ethereum-v0.2.1.spkg
  {
    // map_block_stats
    input: new Uint8Array([
      10, 15, 109, 97, 112, 95, 98, 108, 111, 99, 107, 95, 115, 116, 97, 116, 115, 18, 31, 10, 29, 112, 114, 111, 116,
      111, 58, 115, 117, 98, 116, 105, 118, 105, 116, 121, 46, 118, 49, 46, 66, 108, 111, 99, 107, 83, 116, 97, 116,
      115, 42, 15, 109, 97, 112, 95, 98, 108, 111, 99, 107, 95, 115, 116, 97, 116, 115, 50, 29, 10, 27, 10, 25, 115,
      102, 46, 101, 116, 104, 101, 114, 101, 117, 109, 46, 116, 121, 112, 101, 46, 118, 50, 46, 66, 108, 111, 99, 107,
      58, 31, 10, 29, 112, 114, 111, 116, 111, 58, 115, 117, 98, 116, 105, 118, 105, 116, 121, 46, 118, 49, 46, 66, 108,
      111, 99, 107, 83, 116, 97, 116, 115,
    ]),
    expected: "aa5dd16dc1185ca3628dd16ff2ebcad68f08688f",
  },
  {
    // prom_out
    input: new Uint8Array([
      10, 8, 112, 114, 111, 109, 95, 111, 117, 116, 18, 64, 10, 62, 112, 114, 111, 116, 111, 58, 112, 105, 110, 97, 120,
      46, 115, 117, 98, 115, 116, 114, 101, 97, 109, 115, 46, 115, 105, 110, 107, 46, 112, 114, 111, 109, 101, 116, 104,
      101, 117, 115, 46, 118, 49, 46, 80, 114, 111, 109, 101, 116, 104, 101, 117, 115, 79, 112, 101, 114, 97, 116, 105,
      111, 110, 115, 32, 1, 42, 8, 112, 114, 111, 109, 95, 111, 117, 116, 50, 19, 18, 17, 10, 15, 109, 97, 112, 95, 98,
      108, 111, 99, 107, 95, 115, 116, 97, 116, 115, 58, 64, 10, 62, 112, 114, 111, 116, 111, 58, 112, 105, 110, 97,
      120, 46, 115, 117, 98, 115, 116, 114, 101, 97, 109, 115, 46, 115, 105, 110, 107, 46, 112, 114, 111, 109, 101, 116,
      104, 101, 117, 115, 46, 118, 49, 46, 80, 114, 111, 109, 101, 116, 104, 101, 117, 115, 79, 112, 101, 114, 97, 116,
      105, 111, 110, 115,
    ]),
    expected: "0003de38e0c5b97cb4fd6f45a5aa784a23275916",
  },
] as {
  input: Uint8Array;
  expected: string;
}[])("createModuleHash($input) === $expected", async ({ input, expected }) => {
  const hash = createBinaryHash(input);
  expect(hash).toMatchObject(expected);
});
