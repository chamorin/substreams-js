// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file uniswap/v1/uniswap.proto (package uniswap.types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message uniswap.types.v1.ERC20Tokens
 */
export class ERC20Tokens extends Message<ERC20Tokens> {
  /**
   * @generated from field: repeated uniswap.types.v1.ERC20Token tokens = 1;
   */
  tokens: ERC20Token[] = [];

  constructor(data?: PartialMessage<ERC20Tokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.ERC20Tokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "message", T: ERC20Token, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ERC20Tokens {
    return new ERC20Tokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ERC20Tokens {
    return new ERC20Tokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ERC20Tokens {
    return new ERC20Tokens().fromJsonString(jsonString, options);
  }

  static equals(a: ERC20Tokens | PlainMessage<ERC20Tokens> | undefined, b: ERC20Tokens | PlainMessage<ERC20Tokens> | undefined): boolean {
    return proto3.util.equals(ERC20Tokens, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.ERC20Token
 */
export class ERC20Token extends Message<ERC20Token> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * @generated from field: uint64 decimals = 4;
   */
  decimals = protoInt64.zero;

  /**
   * @generated from field: string total_supply = 5;
   */
  totalSupply = "";

  /**
   * @generated from field: repeated string whitelist_pools = 6;
   */
  whitelistPools: string[] = [];

  constructor(data?: PartialMessage<ERC20Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.ERC20Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "total_supply", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "whitelist_pools", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ERC20Token {
    return new ERC20Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ERC20Token {
    return new ERC20Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ERC20Token {
    return new ERC20Token().fromJsonString(jsonString, options);
  }

  static equals(a: ERC20Token | PlainMessage<ERC20Token> | undefined, b: ERC20Token | PlainMessage<ERC20Token> | undefined): boolean {
    return proto3.util.equals(ERC20Token, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Liquidity
 */
export class Liquidity extends Message<Liquidity> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * Decimal
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Liquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Liquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Liquidity {
    return new Liquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Liquidity {
    return new Liquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Liquidity {
    return new Liquidity().fromJsonString(jsonString, options);
  }

  static equals(a: Liquidity | PlainMessage<Liquidity> | undefined, b: Liquidity | PlainMessage<Liquidity> | undefined): boolean {
    return proto3.util.equals(Liquidity, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Pools
 */
export class Pools extends Message<Pools> {
  /**
   * @generated from field: repeated uniswap.types.v1.Pool pools = 1;
   */
  pools: Pool[] = [];

  constructor(data?: PartialMessage<Pools>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Pools";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Pool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pools {
    return new Pools().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pools {
    return new Pools().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pools {
    return new Pools().fromJsonString(jsonString, options);
  }

  static equals(a: Pools | PlainMessage<Pools> | undefined, b: Pools | PlainMessage<Pools> | undefined): boolean {
    return proto3.util.equals(Pools, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 created_at_timestamp = 3;
   */
  createdAtTimestamp = protoInt64.zero;

  /**
   * @generated from field: uint64 created_at_block_number = 4;
   */
  createdAtBlockNumber = protoInt64.zero;

  /**
   * @generated from field: uniswap.types.v1.ERC20Token token0 = 5;
   */
  token0?: ERC20Token;

  /**
   * @generated from field: uniswap.types.v1.ERC20Token token1 = 6;
   */
  token1?: ERC20Token;

  /**
   * Integer
   *
   * @generated from field: string fee_tier = 7;
   */
  feeTier = "";

  /**
   * internals
   *
   * @generated from field: int32 tick_spacing = 30;
   */
  tickSpacing = 0;

  /**
   * @generated from field: uint64 log_ordinal = 31;
   */
  logOrdinal = protoInt64.zero;

  /**
   * @generated from field: string transaction_id = 32;
   */
  transactionId = "";

  /**
   * @generated from field: bool ignore_pool = 33;
   */
  ignorePool = false;

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "created_at_block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "token0", kind: "message", T: ERC20Token },
    { no: 6, name: "token1", kind: "message", T: ERC20Token },
    { no: 7, name: "fee_tier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "tick_spacing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 31, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 32, name: "transaction_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 33, name: "ignore_pool", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events
 */
export class Events extends Message<Events> {
  /**
   * @generated from field: repeated uniswap.types.v1.Events.PoolSqrtPrice pool_sqrt_prices = 1;
   */
  poolSqrtPrices: Events_PoolSqrtPrice[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.PoolLiquidity pool_liquidities = 2;
   */
  poolLiquidities: Events_PoolLiquidity[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.FeeGrowthGlobal fee_growth_global_updates = 7;
   */
  feeGrowthGlobalUpdates: Events_FeeGrowthGlobal[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.FeeGrowthInside fee_growth_inside_updates = 10;
   */
  feeGrowthInsideUpdates: Events_FeeGrowthInside[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.FeeGrowthOutside fee_growth_outside_updates = 11;
   */
  feeGrowthOutsideUpdates: Events_FeeGrowthOutside[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.PoolEvent pool_events = 3;
   */
  poolEvents: Events_PoolEvent[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.Transaction transactions = 4;
   */
  transactions: Events_Transaction[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.Flash flashes = 6;
   */
  flashes: Events_Flash[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.TickCreated ticks_created = 8;
   */
  ticksCreated: Events_TickCreated[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.TickUpdated ticks_updated = 9;
   */
  ticksUpdated: Events_TickUpdated[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.CreatedPosition created_positions = 20;
   */
  createdPositions: Events_CreatedPosition[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.IncreaseLiquidityPosition increase_liquidity_positions = 21;
   */
  increaseLiquidityPositions: Events_IncreaseLiquidityPosition[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.DecreaseLiquidityPosition decrease_liquidity_positions = 22;
   */
  decreaseLiquidityPositions: Events_DecreaseLiquidityPosition[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.CollectPosition collect_positions = 23;
   */
  collectPositions: Events_CollectPosition[] = [];

  /**
   * @generated from field: repeated uniswap.types.v1.Events.TransferPosition transfer_positions = 24;
   */
  transferPositions: Events_TransferPosition[] = [];

  constructor(data?: PartialMessage<Events>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_sqrt_prices", kind: "message", T: Events_PoolSqrtPrice, repeated: true },
    { no: 2, name: "pool_liquidities", kind: "message", T: Events_PoolLiquidity, repeated: true },
    { no: 7, name: "fee_growth_global_updates", kind: "message", T: Events_FeeGrowthGlobal, repeated: true },
    { no: 10, name: "fee_growth_inside_updates", kind: "message", T: Events_FeeGrowthInside, repeated: true },
    { no: 11, name: "fee_growth_outside_updates", kind: "message", T: Events_FeeGrowthOutside, repeated: true },
    { no: 3, name: "pool_events", kind: "message", T: Events_PoolEvent, repeated: true },
    { no: 4, name: "transactions", kind: "message", T: Events_Transaction, repeated: true },
    { no: 6, name: "flashes", kind: "message", T: Events_Flash, repeated: true },
    { no: 8, name: "ticks_created", kind: "message", T: Events_TickCreated, repeated: true },
    { no: 9, name: "ticks_updated", kind: "message", T: Events_TickUpdated, repeated: true },
    { no: 20, name: "created_positions", kind: "message", T: Events_CreatedPosition, repeated: true },
    { no: 21, name: "increase_liquidity_positions", kind: "message", T: Events_IncreaseLiquidityPosition, repeated: true },
    { no: 22, name: "decrease_liquidity_positions", kind: "message", T: Events_DecreaseLiquidityPosition, repeated: true },
    { no: 23, name: "collect_positions", kind: "message", T: Events_CollectPosition, repeated: true },
    { no: 24, name: "transfer_positions", kind: "message", T: Events_TransferPosition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events {
    return new Events().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events {
    return new Events().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events {
    return new Events().fromJsonString(jsonString, options);
  }

  static equals(a: Events | PlainMessage<Events> | undefined, b: Events | PlainMessage<Events> | undefined): boolean {
    return proto3.util.equals(Events, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.FeeGrowthGlobal
 */
export class Events_FeeGrowthGlobal extends Message<Events_FeeGrowthGlobal> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * @generated from field: uint64 ordinal = 2;
   */
  ordinal = protoInt64.zero;

  /**
   * @generated from field: int32 token_idx = 3;
   */
  tokenIdx = 0;

  /**
   * Integer
   *
   * @generated from field: string new_value = 4;
   */
  newValue = "";

  constructor(data?: PartialMessage<Events_FeeGrowthGlobal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.FeeGrowthGlobal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_idx", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "new_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_FeeGrowthGlobal {
    return new Events_FeeGrowthGlobal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_FeeGrowthGlobal {
    return new Events_FeeGrowthGlobal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_FeeGrowthGlobal {
    return new Events_FeeGrowthGlobal().fromJsonString(jsonString, options);
  }

  static equals(a: Events_FeeGrowthGlobal | PlainMessage<Events_FeeGrowthGlobal> | undefined, b: Events_FeeGrowthGlobal | PlainMessage<Events_FeeGrowthGlobal> | undefined): boolean {
    return proto3.util.equals(Events_FeeGrowthGlobal, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.FeeGrowthInside
 */
export class Events_FeeGrowthInside extends Message<Events_FeeGrowthInside> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * @generated from field: int32 tick_idx = 2;
   */
  tickIdx = 0;

  /**
   * @generated from field: uint64 ordinal = 3;
   */
  ordinal = protoInt64.zero;

  /**
   * Integer
   *
   * @generated from field: string new_value = 4;
   */
  newValue = "";

  constructor(data?: PartialMessage<Events_FeeGrowthInside>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.FeeGrowthInside";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tick_idx", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "new_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_FeeGrowthInside {
    return new Events_FeeGrowthInside().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_FeeGrowthInside {
    return new Events_FeeGrowthInside().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_FeeGrowthInside {
    return new Events_FeeGrowthInside().fromJsonString(jsonString, options);
  }

  static equals(a: Events_FeeGrowthInside | PlainMessage<Events_FeeGrowthInside> | undefined, b: Events_FeeGrowthInside | PlainMessage<Events_FeeGrowthInside> | undefined): boolean {
    return proto3.util.equals(Events_FeeGrowthInside, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.FeeGrowthOutside
 */
export class Events_FeeGrowthOutside extends Message<Events_FeeGrowthOutside> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * @generated from field: int32 tick_lower = 2;
   */
  tickLower = 0;

  /**
   * @generated from field: int32 tick_upper = 3;
   */
  tickUpper = 0;

  /**
   * @generated from field: uint64 ordinal = 4;
   */
  ordinal = protoInt64.zero;

  /**
   * Integer
   *
   * @generated from field: string new_value = 5;
   */
  newValue = "";

  constructor(data?: PartialMessage<Events_FeeGrowthOutside>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.FeeGrowthOutside";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tick_lower", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "tick_upper", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "new_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_FeeGrowthOutside {
    return new Events_FeeGrowthOutside().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_FeeGrowthOutside {
    return new Events_FeeGrowthOutside().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_FeeGrowthOutside {
    return new Events_FeeGrowthOutside().fromJsonString(jsonString, options);
  }

  static equals(a: Events_FeeGrowthOutside | PlainMessage<Events_FeeGrowthOutside> | undefined, b: Events_FeeGrowthOutside | PlainMessage<Events_FeeGrowthOutside> | undefined): boolean {
    return proto3.util.equals(Events_FeeGrowthOutside, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.TickCreated
 */
export class Events_TickCreated extends Message<Events_TickCreated> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * Integer
   *
   * @generated from field: string idx = 2;
   */
  idx = "";

  /**
   * @generated from field: uint64 log_ordinal = 3;
   */
  logOrdinal = protoInt64.zero;

  /**
   * @generated from field: uint64 created_at_timestamp = 4;
   */
  createdAtTimestamp = protoInt64.zero;

  /**
   * @generated from field: uint64 created_at_block_number = 5;
   */
  createdAtBlockNumber = protoInt64.zero;

  /**
   * Decimal
   *
   * @generated from field: string price0 = 6;
   */
  price0 = "";

  /**
   * Decimal
   *
   * @generated from field: string price1 = 7;
   */
  price1 = "";

  /**
   * Integer
   *
   * @generated from field: string amount = 8;
   */
  amount = "";

  constructor(data?: PartialMessage<Events_TickCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.TickCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idx", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "created_at_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "created_at_block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "price0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "price1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_TickCreated {
    return new Events_TickCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_TickCreated {
    return new Events_TickCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_TickCreated {
    return new Events_TickCreated().fromJsonString(jsonString, options);
  }

  static equals(a: Events_TickCreated | PlainMessage<Events_TickCreated> | undefined, b: Events_TickCreated | PlainMessage<Events_TickCreated> | undefined): boolean {
    return proto3.util.equals(Events_TickCreated, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.TickUpdated
 */
export class Events_TickUpdated extends Message<Events_TickUpdated> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * Integer
   *
   * @generated from field: string idx = 2;
   */
  idx = "";

  /**
   * @generated from field: uint64 log_ordinal = 3;
   */
  logOrdinal = protoInt64.zero;

  /**
   * Integer
   *
   * @generated from field: string fee_growth_outside_0X_128 = 4;
   */
  feeGrowthOutside0X128 = "";

  /**
   * Integer
   *
   * @generated from field: string fee_growth_outside_1X_128 = 5;
   */
  feeGrowthOutside1X128 = "";

  /**
   * @generated from field: uint64 timestamp = 6;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<Events_TickUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.TickUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idx", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "fee_growth_outside_0X_128", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fee_growth_outside_1X_128", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_TickUpdated {
    return new Events_TickUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_TickUpdated {
    return new Events_TickUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_TickUpdated {
    return new Events_TickUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: Events_TickUpdated | PlainMessage<Events_TickUpdated> | undefined, b: Events_TickUpdated | PlainMessage<Events_TickUpdated> | undefined): boolean {
    return proto3.util.equals(Events_TickUpdated, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PoolSqrtPrice
 */
export class Events_PoolSqrtPrice extends Message<Events_PoolSqrtPrice> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * @generated from field: uint64 ordinal = 2;
   */
  ordinal = protoInt64.zero;

  /**
   * Integer
   *
   * @generated from field: string sqrt_price = 3;
   */
  sqrtPrice = "";

  /**
   * Integer
   *
   * @generated from field: string tick = 4;
   */
  tick = "";

  /**
   * @generated from field: bool initialized = 5;
   */
  initialized = false;

  constructor(data?: PartialMessage<Events_PoolSqrtPrice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PoolSqrtPrice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "sqrt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tick", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "initialized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PoolSqrtPrice {
    return new Events_PoolSqrtPrice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PoolSqrtPrice {
    return new Events_PoolSqrtPrice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PoolSqrtPrice {
    return new Events_PoolSqrtPrice().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PoolSqrtPrice | PlainMessage<Events_PoolSqrtPrice> | undefined, b: Events_PoolSqrtPrice | PlainMessage<Events_PoolSqrtPrice> | undefined): boolean {
    return proto3.util.equals(Events_PoolSqrtPrice, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PoolEvent
 */
export class Events_PoolEvent extends Message<Events_PoolEvent> {
  /**
   * @generated from oneof uniswap.types.v1.Events.PoolEvent.type
   */
  type: {
    /**
     * @generated from field: uniswap.types.v1.Events.PoolEvent.Swap swap = 1;
     */
    value: Events_PoolEvent_Swap;
    case: "swap";
  } | {
    /**
     * @generated from field: uniswap.types.v1.Events.PoolEvent.Burn burn = 2;
     */
    value: Events_PoolEvent_Burn;
    case: "burn";
  } | {
    /**
     * @generated from field: uniswap.types.v1.Events.PoolEvent.Mint mint = 3;
     */
    value: Events_PoolEvent_Mint;
    case: "mint";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: uint64 log_ordinal = 100;
   */
  logOrdinal = protoInt64.zero;

  /**
   * @generated from field: uint64 log_index = 101;
   */
  logIndex = protoInt64.zero;

  /**
   * @generated from field: string pool_address = 102;
   */
  poolAddress = "";

  /**
   * @generated from field: string token0 = 103;
   */
  token0 = "";

  /**
   * @generated from field: string token1 = 104;
   */
  token1 = "";

  /**
   * @generated from field: string fee = 105;
   */
  fee = "";

  /**
   * @generated from field: string transaction_id = 106;
   */
  transactionId = "";

  /**
   * @generated from field: uint64 timestamp = 107;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: uint64 created_at_block_number = 108;
   */
  createdAtBlockNumber = protoInt64.zero;

  constructor(data?: PartialMessage<Events_PoolEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PoolEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap", kind: "message", T: Events_PoolEvent_Swap, oneof: "type" },
    { no: 2, name: "burn", kind: "message", T: Events_PoolEvent_Burn, oneof: "type" },
    { no: 3, name: "mint", kind: "message", T: Events_PoolEvent_Mint, oneof: "type" },
    { no: 100, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 101, name: "log_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 104, name: "token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 105, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 106, name: "transaction_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 107, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 108, name: "created_at_block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PoolEvent {
    return new Events_PoolEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PoolEvent {
    return new Events_PoolEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PoolEvent {
    return new Events_PoolEvent().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PoolEvent | PlainMessage<Events_PoolEvent> | undefined, b: Events_PoolEvent | PlainMessage<Events_PoolEvent> | undefined): boolean {
    return proto3.util.equals(Events_PoolEvent, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PoolEvent.Swap
 */
export class Events_PoolEvent_Swap extends Message<Events_PoolEvent_Swap> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: string origin = 3;
   */
  origin = "";

  /**
   * Decimal
   *
   * @generated from field: string amount_0 = 4;
   */
  amount0 = "";

  /**
   * Decimal
   *
   * @generated from field: string amount_1 = 5;
   */
  amount1 = "";

  /**
   * Integer
   *
   * @generated from field: string sqrt_price = 6;
   */
  sqrtPrice = "";

  /**
   * Integer
   *
   * @generated from field: string liquidity = 7;
   */
  liquidity = "";

  /**
   * Integer
   *
   * @generated from field: string tick = 8;
   */
  tick = "";

  constructor(data?: PartialMessage<Events_PoolEvent_Swap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PoolEvent.Swap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "sqrt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tick", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PoolEvent_Swap {
    return new Events_PoolEvent_Swap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PoolEvent_Swap {
    return new Events_PoolEvent_Swap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PoolEvent_Swap {
    return new Events_PoolEvent_Swap().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PoolEvent_Swap | PlainMessage<Events_PoolEvent_Swap> | undefined, b: Events_PoolEvent_Swap | PlainMessage<Events_PoolEvent_Swap> | undefined): boolean {
    return proto3.util.equals(Events_PoolEvent_Swap, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PoolEvent.Burn
 */
export class Events_PoolEvent_Burn extends Message<Events_PoolEvent_Burn> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: string origin = 2;
   */
  origin = "";

  /**
   * Integer
   *
   * @generated from field: string amount = 3;
   */
  amount = "";

  /**
   * Decimal
   *
   * @generated from field: string amount_0 = 4;
   */
  amount0 = "";

  /**
   * Decimal
   *
   * @generated from field: string amount_1 = 5;
   */
  amount1 = "";

  /**
   * Integer
   *
   * @generated from field: string tick_lower = 6;
   */
  tickLower = "";

  /**
   * Integer
   *
   * @generated from field: string tick_upper = 7;
   */
  tickUpper = "";

  constructor(data?: PartialMessage<Events_PoolEvent_Burn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PoolEvent.Burn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tick_lower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "tick_upper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PoolEvent_Burn {
    return new Events_PoolEvent_Burn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PoolEvent_Burn {
    return new Events_PoolEvent_Burn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PoolEvent_Burn {
    return new Events_PoolEvent_Burn().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PoolEvent_Burn | PlainMessage<Events_PoolEvent_Burn> | undefined, b: Events_PoolEvent_Burn | PlainMessage<Events_PoolEvent_Burn> | undefined): boolean {
    return proto3.util.equals(Events_PoolEvent_Burn, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PoolEvent.Mint
 */
export class Events_PoolEvent_Mint extends Message<Events_PoolEvent_Mint> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string origin = 3;
   */
  origin = "";

  /**
   * Decimal
   *
   * @generated from field: string amount_0 = 4;
   */
  amount0 = "";

  /**
   * Decimal
   *
   * @generated from field: string amount_1 = 5;
   */
  amount1 = "";

  /**
   * Integer
   *
   * @generated from field: string tick_lower = 6;
   */
  tickLower = "";

  /**
   * Integer
   *
   * @generated from field: string tick_upper = 7;
   */
  tickUpper = "";

  /**
   * Integer
   *
   * @generated from field: string amount = 8;
   */
  amount = "";

  constructor(data?: PartialMessage<Events_PoolEvent_Mint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PoolEvent.Mint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount_0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tick_lower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "tick_upper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PoolEvent_Mint {
    return new Events_PoolEvent_Mint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PoolEvent_Mint {
    return new Events_PoolEvent_Mint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PoolEvent_Mint {
    return new Events_PoolEvent_Mint().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PoolEvent_Mint | PlainMessage<Events_PoolEvent_Mint> | undefined, b: Events_PoolEvent_Mint | PlainMessage<Events_PoolEvent_Mint> | undefined): boolean {
    return proto3.util.equals(Events_PoolEvent_Mint, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PoolLiquidity
 */
export class Events_PoolLiquidity extends Message<Events_PoolLiquidity> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * Integer
   *
   * @generated from field: string liquidity = 2;
   */
  liquidity = "";

  /**
   * internals
   *
   * @generated from field: uint64 log_ordinal = 30;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_PoolLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PoolLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PoolLiquidity {
    return new Events_PoolLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PoolLiquidity {
    return new Events_PoolLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PoolLiquidity {
    return new Events_PoolLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PoolLiquidity | PlainMessage<Events_PoolLiquidity> | undefined, b: Events_PoolLiquidity | PlainMessage<Events_PoolLiquidity> | undefined): boolean {
    return proto3.util.equals(Events_PoolLiquidity, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.Flash
 */
export class Events_Flash extends Message<Events_Flash> {
  /**
   * @generated from field: string pool_address = 1;
   */
  poolAddress = "";

  /**
   * Integer
   *
   * @generated from field: string fee_growth_global_0X_128 = 2;
   */
  feeGrowthGlobal0X128 = "";

  /**
   * Integer
   *
   * @generated from field: string fee_growth_global_1X_128 = 3;
   */
  feeGrowthGlobal1X128 = "";

  /**
   * @generated from field: uint64 log_ordinal = 4;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_Flash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.Flash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fee_growth_global_0X_128", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee_growth_global_1X_128", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_Flash {
    return new Events_Flash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_Flash {
    return new Events_Flash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_Flash {
    return new Events_Flash().fromJsonString(jsonString, options);
  }

  static equals(a: Events_Flash | PlainMessage<Events_Flash> | undefined, b: Events_Flash | PlainMessage<Events_Flash> | undefined): boolean {
    return proto3.util.equals(Events_Flash, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.Transaction
 */
export class Events_Transaction extends Message<Events_Transaction> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 block_number = 2;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: uint64 gas_used = 4;
   */
  gasUsed = protoInt64.zero;

  /**
   * Integer
   *
   * @generated from field: string gas_price = 5;
   */
  gasPrice = "";

  /**
   * @generated from field: uint64 log_ordinal = 6;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "gas_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_Transaction {
    return new Events_Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_Transaction {
    return new Events_Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_Transaction {
    return new Events_Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Events_Transaction | PlainMessage<Events_Transaction> | undefined, b: Events_Transaction | PlainMessage<Events_Transaction> | undefined): boolean {
    return proto3.util.equals(Events_Transaction, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.PositionEvent
 */
export class Events_PositionEvent extends Message<Events_PositionEvent> {
  /**
   * @generated from oneof uniswap.types.v1.Events.PositionEvent.type
   */
  type: {
    /**
     * @generated from field: uniswap.types.v1.Events.CreatedPosition created_position = 1;
     */
    value: Events_CreatedPosition;
    case: "createdPosition";
  } | {
    /**
     * @generated from field: uniswap.types.v1.Events.IncreaseLiquidityPosition increase_liquidity_position = 2;
     */
    value: Events_IncreaseLiquidityPosition;
    case: "increaseLiquidityPosition";
  } | {
    /**
     * @generated from field: uniswap.types.v1.Events.DecreaseLiquidityPosition decrease_liquidity_position = 3;
     */
    value: Events_DecreaseLiquidityPosition;
    case: "decreaseLiquidityPosition";
  } | {
    /**
     * @generated from field: uniswap.types.v1.Events.CollectPosition collect_position = 4;
     */
    value: Events_CollectPosition;
    case: "collectPosition";
  } | {
    /**
     * @generated from field: uniswap.types.v1.Events.TransferPosition transfer_position = 5;
     */
    value: Events_TransferPosition;
    case: "transferPosition";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Events_PositionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.PositionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_position", kind: "message", T: Events_CreatedPosition, oneof: "type" },
    { no: 2, name: "increase_liquidity_position", kind: "message", T: Events_IncreaseLiquidityPosition, oneof: "type" },
    { no: 3, name: "decrease_liquidity_position", kind: "message", T: Events_DecreaseLiquidityPosition, oneof: "type" },
    { no: 4, name: "collect_position", kind: "message", T: Events_CollectPosition, oneof: "type" },
    { no: 5, name: "transfer_position", kind: "message", T: Events_TransferPosition, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_PositionEvent {
    return new Events_PositionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_PositionEvent {
    return new Events_PositionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_PositionEvent {
    return new Events_PositionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: Events_PositionEvent | PlainMessage<Events_PositionEvent> | undefined, b: Events_PositionEvent | PlainMessage<Events_PositionEvent> | undefined): boolean {
    return proto3.util.equals(Events_PositionEvent, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.CreatedPosition
 */
export class Events_CreatedPosition extends Message<Events_CreatedPosition> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  /**
   * @generated from field: string pool = 2;
   */
  pool = "";

  /**
   * @generated from field: string token0 = 3;
   */
  token0 = "";

  /**
   * @generated from field: string token1 = 4;
   */
  token1 = "";

  /**
   * @generated from field: string tick_lower = 5;
   */
  tickLower = "";

  /**
   * @generated from field: string tick_upper = 6;
   */
  tickUpper = "";

  /**
   * @generated from field: string transaction = 7;
   */
  transaction = "";

  /**
   * @generated from field: uint64 log_ordinal = 8;
   */
  logOrdinal = protoInt64.zero;

  /**
   * @generated from field: uint64 timestamp = 9;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: uint64 block_number = 10;
   */
  blockNumber = protoInt64.zero;

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside0_last_x128 = 11;
   */
  feeGrowthInside0LastX128?: string;

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside1_last_x128 = 12;
   */
  feeGrowthInside1LastX128?: string;

  constructor(data?: PartialMessage<Events_CreatedPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.CreatedPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tick_lower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tick_upper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "transaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "fee_growth_inside0_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "fee_growth_inside1_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_CreatedPosition {
    return new Events_CreatedPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_CreatedPosition {
    return new Events_CreatedPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_CreatedPosition {
    return new Events_CreatedPosition().fromJsonString(jsonString, options);
  }

  static equals(a: Events_CreatedPosition | PlainMessage<Events_CreatedPosition> | undefined, b: Events_CreatedPosition | PlainMessage<Events_CreatedPosition> | undefined): boolean {
    return proto3.util.equals(Events_CreatedPosition, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.IncreaseLiquidityPosition
 */
export class Events_IncreaseLiquidityPosition extends Message<Events_IncreaseLiquidityPosition> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  /**
   * BigInt
   *
   * @generated from field: string liquidity = 2;
   */
  liquidity = "";

  /**
   * BigDecimal
   *
   * @generated from field: string deposited_token0 = 3;
   */
  depositedToken0 = "";

  /**
   * BigDecimal
   *
   * @generated from field: string deposited_token1 = 4;
   */
  depositedToken1 = "";

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside0_last_x128 = 5;
   */
  feeGrowthInside0LastX128?: string;

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside1_last_x128 = 6;
   */
  feeGrowthInside1LastX128?: string;

  /**
   * @generated from field: uint64 log_ordinal = 10;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_IncreaseLiquidityPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.IncreaseLiquidityPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deposited_token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "deposited_token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fee_growth_inside0_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "fee_growth_inside1_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_IncreaseLiquidityPosition {
    return new Events_IncreaseLiquidityPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_IncreaseLiquidityPosition {
    return new Events_IncreaseLiquidityPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_IncreaseLiquidityPosition {
    return new Events_IncreaseLiquidityPosition().fromJsonString(jsonString, options);
  }

  static equals(a: Events_IncreaseLiquidityPosition | PlainMessage<Events_IncreaseLiquidityPosition> | undefined, b: Events_IncreaseLiquidityPosition | PlainMessage<Events_IncreaseLiquidityPosition> | undefined): boolean {
    return proto3.util.equals(Events_IncreaseLiquidityPosition, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.DecreaseLiquidityPosition
 */
export class Events_DecreaseLiquidityPosition extends Message<Events_DecreaseLiquidityPosition> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  /**
   * BigInt
   *
   * @generated from field: string liquidity = 2;
   */
  liquidity = "";

  /**
   * BigDecimal
   *
   * @generated from field: string withdrawn_token0 = 3;
   */
  withdrawnToken0 = "";

  /**
   * BigDecimal
   *
   * @generated from field: string withdrawn_token1 = 4;
   */
  withdrawnToken1 = "";

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside0_last_x128 = 5;
   */
  feeGrowthInside0LastX128?: string;

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside1_last_x128 = 6;
   */
  feeGrowthInside1LastX128?: string;

  /**
   * @generated from field: uint64 log_ordinal = 10;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_DecreaseLiquidityPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.DecreaseLiquidityPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "withdrawn_token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "withdrawn_token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fee_growth_inside0_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "fee_growth_inside1_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_DecreaseLiquidityPosition {
    return new Events_DecreaseLiquidityPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_DecreaseLiquidityPosition {
    return new Events_DecreaseLiquidityPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_DecreaseLiquidityPosition {
    return new Events_DecreaseLiquidityPosition().fromJsonString(jsonString, options);
  }

  static equals(a: Events_DecreaseLiquidityPosition | PlainMessage<Events_DecreaseLiquidityPosition> | undefined, b: Events_DecreaseLiquidityPosition | PlainMessage<Events_DecreaseLiquidityPosition> | undefined): boolean {
    return proto3.util.equals(Events_DecreaseLiquidityPosition, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.CollectPosition
 */
export class Events_CollectPosition extends Message<Events_CollectPosition> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  /**
   * BigInt
   *
   * @generated from field: string collected_fees_token0 = 2;
   */
  collectedFeesToken0 = "";

  /**
   * BigInt
   *
   * @generated from field: string collected_fees_token1 = 3;
   */
  collectedFeesToken1 = "";

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside0_last_x128 = 5;
   */
  feeGrowthInside0LastX128?: string;

  /**
   * BigInt
   *
   * @generated from field: optional string fee_growth_inside1_last_x128 = 6;
   */
  feeGrowthInside1LastX128?: string;

  /**
   * @generated from field: uint64 log_ordinal = 10;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_CollectPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.CollectPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collected_fees_token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collected_fees_token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fee_growth_inside0_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "fee_growth_inside1_last_x128", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_CollectPosition {
    return new Events_CollectPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_CollectPosition {
    return new Events_CollectPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_CollectPosition {
    return new Events_CollectPosition().fromJsonString(jsonString, options);
  }

  static equals(a: Events_CollectPosition | PlainMessage<Events_CollectPosition> | undefined, b: Events_CollectPosition | PlainMessage<Events_CollectPosition> | undefined): boolean {
    return proto3.util.equals(Events_CollectPosition, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.Events.TransferPosition
 */
export class Events_TransferPosition extends Message<Events_TransferPosition> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: uint64 log_ordinal = 10;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<Events_TransferPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.Events.TransferPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Events_TransferPosition {
    return new Events_TransferPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Events_TransferPosition {
    return new Events_TransferPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Events_TransferPosition {
    return new Events_TransferPosition().fromJsonString(jsonString, options);
  }

  static equals(a: Events_TransferPosition | PlainMessage<Events_TransferPosition> | undefined, b: Events_TransferPosition | PlainMessage<Events_TransferPosition> | undefined): boolean {
    return proto3.util.equals(Events_TransferPosition, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.SnapshotPositions
 */
export class SnapshotPositions extends Message<SnapshotPositions> {
  /**
   * @generated from field: repeated uniswap.types.v1.SnapshotPosition snapshot_positions = 1;
   */
  snapshotPositions: SnapshotPosition[] = [];

  constructor(data?: PartialMessage<SnapshotPositions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.SnapshotPositions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_positions", kind: "message", T: SnapshotPosition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotPositions {
    return new SnapshotPositions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotPositions {
    return new SnapshotPositions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotPositions {
    return new SnapshotPositions().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotPositions | PlainMessage<SnapshotPositions> | undefined, b: SnapshotPositions | PlainMessage<SnapshotPositions> | undefined): boolean {
    return proto3.util.equals(SnapshotPositions, a, b);
  }
}

/**
 * @generated from message uniswap.types.v1.SnapshotPosition
 */
export class SnapshotPosition extends Message<SnapshotPosition> {
  /**
   * @generated from field: string pool = 1;
   */
  pool = "";

  /**
   * the token_id of the position
   *
   * @generated from field: string position = 2;
   */
  position = "";

  /**
   * @generated from field: uint64 block_number = 3;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: string owner = 4;
   */
  owner = "";

  /**
   * @generated from field: uint64 timestamp = 6;
   */
  timestamp = protoInt64.zero;

  /**
   * Decimal
   *
   * @generated from field: string liquidity = 7;
   */
  liquidity = "";

  /**
   * Decimal
   *
   * @generated from field: string deposited_token0 = 8;
   */
  depositedToken0 = "";

  /**
   * Decimal
   *
   * @generated from field: string deposited_token1 = 9;
   */
  depositedToken1 = "";

  /**
   * Decimal
   *
   * @generated from field: string withdrawn_token0 = 10;
   */
  withdrawnToken0 = "";

  /**
   * Decimal
   *
   * @generated from field: string withdrawn_token1 = 11;
   */
  withdrawnToken1 = "";

  /**
   * Decimal
   *
   * @generated from field: string collected_fees_token0 = 12;
   */
  collectedFeesToken0 = "";

  /**
   * Decimal
   *
   * @generated from field: string collected_fees_token1 = 13;
   */
  collectedFeesToken1 = "";

  /**
   * @generated from field: string transaction = 14;
   */
  transaction = "";

  /**
   * Integer
   *
   * @generated from field: string fee_growth_inside_0_last_X_128 = 15;
   */
  feeGrowthInside0LastX128 = "";

  /**
   * Integer
   *
   * @generated from field: string fee_growth_inside_1_last_X_128 = 16;
   */
  feeGrowthInside1LastX128 = "";

  /**
   * internal
   *
   * @generated from field: uint64 log_ordinal = 17;
   */
  logOrdinal = protoInt64.zero;

  constructor(data?: PartialMessage<SnapshotPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "uniswap.types.v1.SnapshotPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "deposited_token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "deposited_token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "withdrawn_token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "withdrawn_token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "collected_fees_token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "collected_fees_token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "transaction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "fee_growth_inside_0_last_X_128", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "fee_growth_inside_1_last_X_128", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "log_ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotPosition {
    return new SnapshotPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotPosition {
    return new SnapshotPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotPosition {
    return new SnapshotPosition().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotPosition | PlainMessage<SnapshotPosition> | undefined, b: SnapshotPosition | PlainMessage<SnapshotPosition> | undefined): boolean {
    return proto3.util.equals(SnapshotPosition, a, b);
  }
}

